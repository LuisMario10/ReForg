generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  publicId  Int       @unique @default(autoincrement())
  code_cpf  String?   @unique 
  name      String
  email     String    @unique
  password  String
  address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Seller       Seller[]
  Order        Order[]
  Review       Review[]
  ShoppingCart ShoppingCart[]
  ActivityLog  ActivityLog[]

  Chat      Chat[]
}

model Seller {
  id                String   @id
  name              String
  storeDescription  String
  userId            String
  registeredAt      DateTime
  sellerRatingMedia Float?

  user    User      @relation(fields: [userId], references: [id])
  Product Product[]
  Order   Order[]
  Chat    Chat[]
}

model Product {
  id                  String      @id @default(uuid())
  publicId            Int         @unique @default(autoincrement())
  name                String
  description         String?
  priceInCents        Int
  quantity            Int
  sellerId            String
  productType         ProductType
  productManufacturer String
  imageURL            String?
  createdAt           DateTime    @default(now())
  categoryId          Int

  category  Category    @relation(fields: [categoryId], references: [id])
  seller    Seller      @relation(fields: [sellerId], references: [id])
  ItemOrder ItemOrder[]
  Review    Review[]
  CartItem  CartItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  Product     Product[]
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  sellerId    String
  orderDate   DateTime    @default(now())
  orderStatus OrderStatus
  totalCents  Int

  userBuyer  User        @relation(fields: [userId], references: [id])
  userSeller Seller      @relation(fields: [sellerId], references: [id])
  ItemOrder  ItemOrder[]
  Payment    Payment[]
}

model ItemOrder {
  id               String @id @default(uuid())
  orderId          String
  productId        String
  quantity         Int
  unitPriceInCents Int
  itemTotal        Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(uuid())
  publicId      Int           @unique @default(autoincrement())
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  date          DateTime      @default(now())
  valueInCents  Int
  orderId       String

  order Order @relation(fields: [orderId], references: [id])
}

model Address {
  id          String @id @default(uuid())
  publicId    Int    @unique @default(autoincrement())
  allAdress   String
  city        String
  state       String
  zipCode     String
  country     String
  addressType String

  User User[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model ShoppingCart {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())

  user     User       @relation(fields: [userId], references: [id])
  CartItem CartItem[]
}

model CartItem {
  id             String @id @default(uuid())
  publicId       Int    @unique @default(autoincrement())
  productId      String
  shoppingCartId Int
  quantity       Int

  product      Product      @relation(fields: [productId], references: [id])
  shoppingCart ShoppingCart @relation(fields: [shoppingCartId], references: [id])
}

model ActivityLog {
  id      String   @id @default(uuid())
  userId  String
  action  String
  details String
  date    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Cupom {
  id             String    @id @default(uuid())
  publicId       Int       @unique @default(autoincrement())
  code           String
  description    String
  typeCupom      TypeCupom
  expirationDate DateTime?
  conditions     String?
}

model Chat {
  id        Int      @id @default(autoincrement())
  userId    String
  sellerId  String
  content   String
  sendAt    DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  seller Seller @relation(fields: [sellerId], references: [id])
}

enum ProductType {
  Console
  VideoGamePeripheral
  Game
}

enum OrderStatus {
  Generating
  Sent
  Delivered
  Canceled
}

enum PaymentMethod {
  Card
  Ticket
  Pix
}

enum PaymentStatus {
  Failed
  Pending
  Completed
}

enum TypeCupom {
  Discount
  CashValue
}
